(window.webpackJsonp=window.webpackJsonp||[]).push([[133],{510:function(t,s,e){"use strict";e.r(s);var r=e(14),a=Object(r.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"_131-分割回文串"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_131-分割回文串"}},[t._v("#")]),t._v(" 131.分割回文串")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode.cn/problems/palindrome-partitioning/",target:"_blank",rel:"noopener noreferrer"}},[t._v("题目描述"),s("OutboundLink")],1)]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[s("strong",[t._v("标签：字符串、动态规划、回溯")])])]),t._v(" "),s("h2",{attrs:{id:"思路与算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#思路与算法"}},[t._v("#")]),t._v(" 思路与算法")]),t._v(" "),s("p",[t._v("由于需要求出字符串s的所有分割方案，因此我们考虑使用搜索 + 回溯的方法枚举所有可能的分割方案进行判断。")]),t._v(" "),s("p",[t._v("假设我们当前搜索到字符串第i个字符，且"),s("code",[t._v("s[0 ~ i-1]")]),t._v("位置的所有字符串已经被分割成若干个回文串，并且分割结果被放入了答案数组 ans 中，那么我们就需要枚举下一个回文串的右边界j, 使得"),s("code",[t._v("s[i~j]")]),t._v("是一个回文串。")])])}),[],!1,null,null,null);s.default=a.exports}}]);