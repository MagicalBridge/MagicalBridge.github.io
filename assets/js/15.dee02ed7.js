(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{333:function(t,s,a){t.exports=a.p+"assets/img/01.1665d7cf.png"},334:function(t,s,a){t.exports=a.p+"assets/img/02.b673003c.png"},335:function(t,s,a){t.exports=a.p+"assets/img/03.3396a6d7.png"},480:function(t,s,a){"use strict";a.r(s);var e=a(14),n=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"_061-旋转链表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_061-旋转链表"}},[t._v("#")]),t._v(" 061.旋转链表")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode.cn/problems/rotate-list/",target:"_blank",rel:"noopener noreferrer"}},[t._v("题目描述"),s("OutboundLink")],1)]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("标签: 链表、双指针")])]),t._v(" "),s("h2",{attrs:{id:"算法思路"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#算法思路"}},[t._v("#")]),t._v(" 算法思路：")]),t._v(" "),s("p",[t._v("给你一个链表的头节点head，然后将链表每个节点向右移动k个位置。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(333),alt:"旋转示例"}})]),t._v(" "),s("p",[t._v("如图所示 head = [1,2,3,4,5] k=2 我们输出 [4,5,1,2,3] 下面讲解一下模拟的做法。")]),t._v(" "),s("p",[t._v("假设链表的长度为n, 为了将链表的每个节点向右移动k个位置，我们只需要将链表的后 "),s("code",[t._v("k % n")]),t._v(" 个节点移动到链表的最前面，然后将链表的后 "),s("code",[t._v("k % n")]),t._v(" 个节点和前 n - k 个节点连接到一起即可。")]),t._v(" "),s("blockquote",[s("p",[t._v("% 是取余数运算")])]),t._v(" "),s("p",[t._v("具体过程如下：")]),t._v(" "),s("p",[t._v("1、 首先遍历整个链表，求出链表的长度，并找出链表的尾结点tail。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(334),alt:"旋转示例"}})]),t._v(" "),s("p",[t._v("2、由于k可能很大，所以我们令 k = k % n 然后再次从头节点 head 开始遍历，找到第n-k个节点p, 那么 1-p 是链表的前 n-k 个节点， p+1-n 是链表的后k个节点")]),t._v(" "),s("p",[s("img",{attrs:{src:a(335),alt:"旋转示例"}})])])}),[],!1,null,null,null);s.default=n.exports}}]);