(window.webpackJsonp=window.webpackJsonp||[]).push([[152],{533:function(s,n,a){"use strict";a.r(n);var t=a(14),r=Object(t.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"_239-滑动窗口的最大值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_239-滑动窗口的最大值"}},[s._v("#")]),s._v(" 239.滑动窗口的最大值")]),s._v(" "),n("p",[s._v("给你一个整数数组 nums 有一个大小为k的滑动窗口从数组的最左侧移动到数组的最右侧，你只可以看到\n在滑动窗口内的k个数，滑动窗口每次只向右移动一位")]),s._v(" "),n("p",[s._v("示例1：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("输入：nums = [1,3,-1,-3,5,3,6,7], k = 3\n输出：[3,3,5,5,6,7]\n解释：\n滑动窗口的位置                最大值\n---------------               -----\n[1  3  -1] -3  5  3  6  7       3\n 1 [3  -1  -3] 5  3  6  7       3\n 1  3 [-1  -3  5] 3  6  7       5\n 1  3  -1 [-3  5  3] 6  7       5\n 1  3  -1  -3 [5  3  6] 7       6\n 1  3  -1  -3  5 [3  6  7]      7\n\n\n输入：nums = [1], k = 1\n输出：[1]\n\n输入：nums = [1,-1], k = 1\n输出：[1,-1]\n\n输入：nums = [9,11], k = 2\n输出：[11]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br")])]),n("h2",{attrs:{id:"前言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[s._v("#")]),s._v(" 前言")]),s._v(" "),n("p",[s._v("对于每个滑动窗口，我们可以使用O(K)的时间遍历其中的每一个元素，找出其中的最大值，对于长度为n的数组 nums 而言，窗口的数量为 n-k+1(这个规律需要记住)。因此该算法的时间复杂度为 O((n-k+1)k) = O(nk) 会超出时间限制，因此我们需要进行一些优化。")]),s._v(" "),n("p",[s._v("我们可以想到，对于两个相邻(只差一个位置)的滑动窗口，"),n("strong",[s._v("它们公用着 k-1 个元素")]),s._v("（这个信息逻辑非常重要）而只有一个元素是变化的，我们可以根据这个特点进行优化。")]),s._v(" "),n("h2",{attrs:{id:"方法一-单调队列"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#方法一-单调队列"}},[s._v("#")]),s._v(" 方法一：单调队列")])])}),[],!1,null,null,null);n.default=r.exports}}]);