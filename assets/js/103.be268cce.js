(window.webpackJsonp=window.webpackJsonp||[]).push([[103],{473:function(s,t,a){"use strict";a.r(t);var n=a(14),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"_026-删除有序数组中的重复项"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_026-删除有序数组中的重复项"}},[s._v("#")]),s._v(" 026.删除有序数组中的重复项")]),s._v(" "),t("h2",{attrs:{id:"题目描述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#题目描述"}},[s._v("#")]),s._v(" "),t("a",{attrs:{href:"https://leetcode.cn/problems/remove-duplicates-from-sorted-array/",target:"_blank",rel:"noopener noreferrer"}},[s._v("题目描述"),t("OutboundLink")],1)]),s._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[s._v("TIP")]),s._v(" "),t("p",[s._v("标签：数组、双指针")])]),s._v(" "),t("h2",{attrs:{id:"算法思路"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#算法思路"}},[s._v("#")]),s._v(" 算法思路：")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://ricepudding.cn/article/94e253b0",target:"_blank",rel:"noopener noreferrer"}},[s._v("详细动图解释"),t("OutboundLink")],1)]),s._v(" "),t("p",[s._v("本题可以使用快慢指针的思路求解，题目中已经给了前提条件「数组是有序的」，那么重复的元素一定会相邻；")]),s._v(" "),t("p",[s._v("初始阶段，slow 和 fast 指向同一个位置，然后可以遵循以下步骤移动指针：")]),s._v(" "),t("ul",[t("li",[s._v("比较 slow 和 fast 两个指针的位置对应的元素值是否相等；\n"),t("ul",[t("li",[s._v("如果相等，则fast指针后移一位；")]),s._v(" "),t("li",[s._v("如果不相等，此时说明 slow 和 fast 间都是重复的值，此时，fast指针所在的位置的元素是不重复的元素，将 slow 后移一位，将fast位置不重复的元素复制到slow指针所在的位置上，fast指针后移一位继续寻找不同的值。")])])]),s._v(" "),t("li",[s._v("重复上面的步骤，直到fast等于数组的长度；")]),s._v(" "),t("li",[s._v("返回slow + 1 即位新数组的长度；")])]),s._v(" "),t("div",{staticClass:"language-ts line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-ts"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * 给定一个已排序的数组 nums，原地删除重复出现的元素，\n * 使每个元素只出现一次，返回新的数组长度。\n * \n * @param nums - 含有重复元素的已排序数组。\n * @returns 删除重复元素后数组的新长度。\n */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("removeDuplicates")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nums"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("number")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("number")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 初始化两个指针，slow 和 fast，均指向数组的起始位置。")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" slow"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("number")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" fast"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("number")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 使用 fast 指针遍历数组。")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("fast "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" nums"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 判断 fast 指针所指元素是否与 slow 指针所指元素相同。")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nums"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("fast"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!==")]),s._v(" nums"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("slow"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 若不同，将 slow 指针右移一位，并将 slow 指针所在位置的元素更新为 fast 指针所指元素。")]),s._v("\n      slow"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      nums"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("slow"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" nums"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("fast"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 移动 fast 指针到下一个位置。")]),s._v("\n    fast"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// slow 指针现在表示修改后数组的最后一个唯一元素。")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 返回数组的新长度（slow + 1）。")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" slow "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br")])]),t("p",[s._v("在这个算法中，slow 指针表示修改后数组中的最后一个唯一元素的索引，由于数组的索引是从0开始的，所以slow指针的值实际上是数组中唯一元素的数量减去1，")]),s._v(" "),t("p",[s._v("当 slow 指针移动到数组的最后一个唯一元素时，整个数组中唯一元素的数量即为 slow + 1。因此，为了符合问题的要求，函数需要返回修改后数组的新长度，即 slow + 1。")]),s._v(" "),t("p",[s._v("举例说明：")]),s._v(" "),t("p",[s._v("假设数组 nums 为 [1, 1, 2, 2, 3]，在经过 removeDuplicates 函数操作后，数组变为 [1, 2, 3]，而 slow 指针停留在索引 2 处（最后一个唯一元素的索引）。此时，唯一元素的数量为 slow + 1 = 3，因此函数返回 3，表示修改后数组的新长度。")]),s._v(" "),t("h2",{attrs:{id:"复杂度分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#复杂度分析"}},[s._v("#")]),s._v(" 复杂度分析")]),s._v(" "),t("p",[s._v("时间复杂度分析：O(n) 其中 n 是数组的长度。原因如下：")]),s._v(" "),t("ul",[t("li",[s._v("算法使用双指针，其中 "),t("code",[s._v("fast")]),s._v(" 指针从头到尾遍历整个数组，而 "),t("code",[s._v("slow")]),s._v(" 指针仅在发现新元素时移动。")]),s._v(" "),t("li",[s._v("每个元素只会被访问一次，因此遍历的总时间复杂度为 O(n)。")])]),s._v(" "),t("p",[s._v("空间复杂度分析：该算法的空间复杂度是 O(1)。原因如下：")]),s._v(" "),t("ul",[t("li",[s._v("算法只使用了常数级别的额外空间，即两个指针（"),t("code",[s._v("slow")]),s._v(" 和 "),t("code",[s._v("fast")]),s._v("）和常数个辅助变量。")]),s._v(" "),t("li",[s._v("不随着输入规模的增加而增加额外的空间。")])])])}),[],!1,null,null,null);t.default=e.exports}}]);